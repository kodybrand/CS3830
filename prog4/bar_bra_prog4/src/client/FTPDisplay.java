package client;
import java.io.*;
import java.net.*;
import java.util.StringTokenizer;
import javax.swing.DefaultListModel;

/**
 *This is the FTPDisplay class. It will transfer files to and from the server.
 @author Kody Brand
 */
public class FTPDisplay extends javax.swing.JFrame
{
   private File [] files;
   private Socket comSock;
   private Socket dataSock;
   private PrintWriter writeSock;
   private BufferedReader readSock;
   private DefaultListModel listLocal;
   private DefaultListModel listRemote;
   private int totalBytes = 0;
   final int BYTES = 1024;
   
   /**
    Creates new form FTPDisplay
    */
   public FTPDisplay()
   {
      initComponents();
      listLocal = new DefaultListModel();
      listRemote = new DefaultListModel();
      listLocalFiles();
   }

   /**
    This method is called from within the constructor to initialize the form.
    WARNING: Do NOT modify this code. The content of this method is always
    regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jScrollPane1 = new javax.swing.JScrollPane();
      listServerFiles = new javax.swing.JList();
      jScrollPane2 = new javax.swing.JScrollPane();
      listClientFiles = new javax.swing.JList();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jSeparator1 = new javax.swing.JSeparator();
      txtIPAddress = new javax.swing.JTextField();
      txtPort = new javax.swing.JTextField();
      btnConnect = new javax.swing.JButton();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jLabel5 = new javax.swing.JLabel();
      txtPush = new javax.swing.JButton();
      txtPull = new javax.swing.JButton();
      jScrollPane3 = new javax.swing.JScrollPane();
      txtOutput = new javax.swing.JTextArea();
      jLabel6 = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("FTP Client Bar_Bra");
      setType(java.awt.Window.Type.UTILITY);

      jScrollPane1.setViewportView(listServerFiles);

      jScrollPane2.setViewportView(listClientFiles);

      jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel1.setText("Client Files");

      jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel2.setText("Server Files");

      txtIPAddress.setText("localhost");

      txtPort.setText("5721");

      btnConnect.setText("Connect");
      btnConnect.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnConnectActionPerformed(evt);
         }
      });

      jLabel3.setText("IP");

      jLabel4.setText("Port");

      jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
      jLabel5.setText("FTP Client");

      txtPush.setText(">>");
      txtPush.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtPushActionPerformed(evt);
         }
      });

      txtPull.setText("<<");
      txtPull.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtPullActionPerformed(evt);
         }
      });

      txtOutput.setColumns(20);
      txtOutput.setRows(5);
      jScrollPane3.setViewportView(txtOutput);

      jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel6.setText("Output Log");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jSeparator1)
                  .addGap(62, 62, 62))
               .addGroup(layout.createSequentialGroup()
                  .addGap(16, 16, 16)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(btnConnect)
                  .addGap(125, 125, 125)
                  .addComponent(jLabel5)
                  .addContainerGap(147, Short.MAX_VALUE))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                  .addGap(0, 0, Short.MAX_VALUE)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(jScrollPane3)
                     .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                           .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                           .addComponent(txtPush)
                           .addComponent(txtPull))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                           .addComponent(jScrollPane1)
                           .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                     .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addGap(80, 80, 80))))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(txtIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel3))
                  .addGap(11, 11, 11)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel4)
                     .addComponent(btnConnect)))
               .addGroup(layout.createSequentialGroup()
                  .addGap(26, 26, 26)
                  .addComponent(jLabel5)))
            .addGap(10, 10, 10)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(jLabel1)
               .addComponent(jLabel2))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addGroup(layout.createSequentialGroup()
                  .addGap(60, 60, 60)
                  .addComponent(txtPush)
                  .addGap(59, 59, 59)
                  .addComponent(txtPull)))
            .addGap(18, 18, 18)
            .addComponent(jLabel6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   /**
    * Handles the click action of the PUT button.
    * @param evt is the click even of the button.
    */
   private void txtPushActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtPushActionPerformed
   {//GEN-HEADEREND:event_txtPushActionPerformed
      try
      {
         if(listClientFiles.isSelectionEmpty()) 
         {
            txtOutput.append("A file must be selected!" + 
               System.getProperty("line.separator"));
         } 
         else 
         {
            writeSock.println("PUT " + listLocal.getElementAt(
               listClientFiles.getSelectedIndex()).toString());
            sendFile(listLocal.getElementAt(
               listClientFiles.getSelectedIndex()).toString());
         }
      }
      catch (Exception ex)
      {
         txtOutput.append("Error: " + ex + 
            System.getProperty("line.separator"));
      }
   }//GEN-LAST:event_txtPushActionPerformed

   /**
    * Handles the click action of the GET button. 
    * @param evt is the click even of the button. 
    */
   private void txtPullActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtPullActionPerformed
   {//GEN-HEADEREND:event_txtPullActionPerformed
      try
      {
         if(listServerFiles.isSelectionEmpty()) 
         {
            txtOutput.append("A file must be selected!" + 
               System.getProperty("line.separator"));
         } 
         else 
         {
            writeSock.println("GET " + listRemote.getElementAt(
               listServerFiles.getSelectedIndex()).toString());
            getFile(listRemote.getElementAt(
               listServerFiles.getSelectedIndex()).toString());
         }
      }
      catch (Exception ex)
      {
         txtOutput.append("Error: " + ex + 
            System.getProperty("line.separator"));
      }
   }//GEN-LAST:event_txtPullActionPerformed
   
   /**
    * Handles when the connect/disconnect button is clicked. 
    * @param evt is the click even of the button.
    */
   private void btnConnectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnConnectActionPerformed
   {//GEN-HEADEREND:event_btnConnectActionPerformed
      String currentText = btnConnect.getText();
      if ("Connect".equals(currentText))
      {
         String ip = txtIPAddress.getText();
         int port = Integer.parseInt(txtPort.getText());
         if(ip.length() > 0 || port > 0) 
         {
            try 
            {
               comSock = new Socket(ip,port);
               writeSock = new PrintWriter(comSock.getOutputStream(), true);
               readSock = new BufferedReader(new InputStreamReader(
               comSock.getInputStream()));
               listRemoteFiles();
               txtOutput.append("Connected to Server" + 
                  System.getProperty("line.separator"));
               btnConnect.setText("Disconnect");
            } 
            catch (Exception e) 
            {
               txtOutput.append("Error : " + e + 
                  System.getProperty("line.separator"));
            }
         }
      }
      else
         disconnect();
   }//GEN-LAST:event_btnConnectActionPerformed

   /**
    * Disconnects from the server.
    */
   private void disconnect()
   {
      try 
      {
         readSock.close();
         writeSock.close();
         comSock.close();
         btnConnect.setText("Connect");
         txtOutput.append("Disconnected!" + 
            System.getProperty("line.separator"));
         listRemote.clear();
         listServerFiles.removeAll();
         listLocalFiles();
      } 
      catch (Exception ex) 
      {
         txtOutput.append("Error: " + ex + 
            System.getProperty("line.separator"));
      }
   }
   
   /**
    *Handles the main running of the client. 
    @param args the command line arguments
    */
   public static void main(String args[])
   {
      java.awt.EventQueue.invokeLater(new Runnable()
      {
         public void run()
         {
            new FTPDisplay().setVisible(true);
         }
      });
   }
   
   /**
    * Lists the remote files from the server into the server files list.
    */
   private void listRemoteFiles() 
   {
      listRemote.clear();
      listServerFiles.removeAll();
      try
      {
         String stringLine = readSock.readLine();
         if (stringLine != null)
         {
            StringTokenizer st = new StringTokenizer(stringLine, ",");
            while (st.hasMoreTokens()) 
            {
               listRemote.addElement(st.nextToken());
            }
            listServerFiles.setModel(listRemote);
         }
      }
      catch (Exception ex)
      {
         txtOutput.append("FTPDisplay Error: " + ex + 
            System.getProperty("line.separator"));
      }
   }
   
   /**
    * Lists the local files of the client. 
    */
   private void listLocalFiles() 
   {
      listLocal.clear();
      listClientFiles.removeAll();
      File dir = new File("ClientFiles");
      files = dir.listFiles();
      for(int i = 0; i < files.length; i++) 
      {
         if (files[i].isFile())
            {
               listLocal.addElement(files[i].getName());
            }
      }
      listClientFiles.setModel(listLocal);
   }
   
   /**
    * Sends the file to the server.
    * @param fileName is the file to be sent. 
    */
   private void sendFile(String fileName) 
   {
      try
      {
         txtOutput.append("Sending the file..." + 
            System.getProperty("line.separator"));
         txtOutput.append("File: " + fileName + 
            System.getProperty("line.separator"));
         String htAddress = txtIPAddress.getText(); 
         dataSock = new Socket(htAddress, Integer.valueOf(readSock.readLine()));
         DataOutputStream ds = new DataOutputStream(dataSock.getOutputStream());
         FileInputStream fis = new FileInputStream("ClientFiles\\" + fileName);
         byte[] buffer = new byte[BYTES];
         while (fis.read(buffer) > 0)
         {
            totalBytes += buffer.length;
            ds.write(buffer);
         }
         txtOutput.append(totalBytes + " bytes sent." + 
            System.getProperty("line.separator"));
         totalBytes = 0;
         ds.close();
         fis.close();
         dataSock.close();
         txtOutput.append("Data Connection Closed." + 
            System.getProperty("line.separator"));
         listLocalFiles();
         listRemoteFiles();
      }
      catch (Exception ex)
      {
         txtOutput.append("FTPDisplay Exception:" + ex + 
            System.getProperty("line.separator"));
      }
   }
   
   /**
    * Gets a file from the server. 
    * @param fileName is the file from the server. 
    */
   private void getFile(String fileName) 
   {
      try
      {
         txtOutput.append("Receiving the file..." + 
            System.getProperty("line.separator"));
         String htAddress = txtIPAddress.getText(); 
         dataSock = new Socket(htAddress, Integer.valueOf(readSock.readLine()));
         DataInputStream dis = new DataInputStream(dataSock.getInputStream());
         FileOutputStream fs = new FileOutputStream("ClientFiles\\" + fileName);
         byte[] buffer = new byte[BYTES];
         while (dis.read(buffer) > 0)
         {
            totalBytes += buffer.length;
            fs.write(buffer);
         }
         txtOutput.append("Got the file: " + fileName + 
            System.getProperty("line.separator"));
         txtOutput.append("Size: " + totalBytes + " Bytes." + 
            System.getProperty("line.separator"));
         totalBytes = 0;
         fs.close();
         dis.close();
         dataSock.close();
         txtOutput.append("Data Connection Closed." + 
            System.getProperty("line.separator"));
         listLocalFiles();
         listRemoteFiles();
      }
      catch (Exception ex)
      {
         txtOutput.append("FTPDisplay Exception:" + ex + 
            System.getProperty("line.separator"));
      }
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnConnect;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JScrollPane jScrollPane3;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JList listClientFiles;
   private javax.swing.JList listServerFiles;
   private javax.swing.JTextField txtIPAddress;
   private javax.swing.JTextArea txtOutput;
   private javax.swing.JTextField txtPort;
   private javax.swing.JButton txtPull;
   private javax.swing.JButton txtPush;
   // End of variables declaration//GEN-END:variables
}
